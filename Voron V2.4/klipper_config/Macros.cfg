#####################################################################
#   List of macro commands
#####################################################################
# 1  - Pause
# 2  - Resume
# 3  - Cancel print
# 4  - G32 Calibration
# 5  - Print start
# 5.1- Print start "Pfote"
# 6  - Print end
# 7  - Test speed
# 8  - led off
# 9  - Led on
# 10 - Load filament
# 11 - Unload filament

#####################################################################
#   Pause
#####################################################################

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(50)|int %}                                                   ; z hop amount

    {% if printer['pause_resume'].is_paused|int == 0 %}
        _status_button_ready BUTTON=10      #10 Service button
        _status_button_ready BUTTON=8       #8  Resume button
        _status_button_ready BUTTON=4     #4  Extrude 50mm button
        _status_button_ready BUTTON=12      #12 Cancel print button
        _status_button_ready BUTTON=11      #11 Clean nozzle button
        _status_button_busy BUTTON=9        #9  Pause button
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro

        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                                  ; disable filament sensor
        NEOPIXEL_DISPLAY LED=status_led TYPE=clear
        status_led_error
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2+87} Y{printer.toolhead.axis_minimum.y+10} F6000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
        #M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}

#####################################################################
#   Resume
#####################################################################

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)

    {% if printer['pause_resume'].is_paused|int == 1 %}
        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1                          ; enable filament sensor
        NEOPIXEL_DISPLAY LED=status_led TYPE=print_percent MODE=progress                                                              
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        BASE_RESUME                                                                  ; resume print
        _status_button_standby BUTTON=10        #10 Service button
        _status_button_standby BUTTON=11        #11 Clean nozzle button
        _status_button_standby BUTTON=4         #4  Extrude 50mm button
        _status_button_ready BUTTON=12          #12 Cancel print button
        _status_button_ready BUTTON=9           #9  Pause button
        _status_button_standby BUTTON=8         #8  Resume button
    {% endif %}

#####################################################################
#   Cancel print
#####################################################################

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    PRINT_END
    BASE_CANCEL_PRINT
    status_led_ready
    _status_button_busy BUTTON=2        #2  Preheat button
    _status_button_ready BUTTON=4       #4  Extrude 50mm button
    _status_button_ready BUTTON=6       #6  Home all button
    _status_button_standby BUTTON=8     #8  Resume button
    _status_button_standby BUTTON=9     #9  Pause button
    _status_button_ready BUTTON=10      #10 Service button
    _status_button_ready BUTTON=11      #11 Clean nozzle button
    _status_button_standby BUTTON=12    #12 Cancel print button
    SET_LED_TEMPLATE LED=hotkey_leds TEMPLATE=""
    _status_button_ready BUTTON=7       #7  Led on/off button

#####################################################################
#   G32 Calibration - Home and QGL
#####################################################################

[gcode_macro G32]
gcode:
        G28
    QUAD_GANTRY_LEVEL
    G28 Z0
   
#####################################################################
#   Print start macro
#####################################################################

[gcode_macro PRINT_START]
gcode:
  # This part fetches data from your slicer. Such as bed temp, extruder temp, chamber temp and size of your printer.
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  {% set target_chamber = params.CHAMBER|default("30")|int %}
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

  # Homes the printer, sets absolute positioning and updates the Stealthburner leds.
  SET_VELOCITY_LIMIT ACCEL=15000
  SET_VELOCITY_LIMIT ACCEL_TO_DECEL=7500 
  _status_button_ready BUTTON=7     #7  Led on/off button
  STATUS_HOMING         # Sets SB-leds to homing-mode
  _status_button_standby BUTTON=4
  _status_button_standby BUTTON=10
  _status_button_standby BUTTON=11
  G28                   # Full home (XYZ)
  _status_button_standby BUTTON=6
  G90                   # Absolut position
  BED_MESH_CLEAR        # Clears old saved bed mesh (if any)
   
  # Checks if the bed temp is higher than 90c - if so then trigger a heatsoak.
  {% if params.BED|int > 80 %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Displays info
    NEOPIXEL_DISPLAY LED=hotkey_leds TYPE=bed_temp MODE=glow 
    _status_button_ready BUTTON=2
    STATUS_HEATING                                      # Sets SB-leds to heating-mode
    STATUS_LED_HEATING
    M106 S255                                           # Turns on the PT-fan

    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Goes to center of the bed
    M190 S{target_bed}                                  # Sets the target temp for the bed
    #SET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"  # Displays info
    #TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}   # Waits for chamber to reach desired temp

  # If the bed temp is not over 90c, then it skips the heatsoak and just heats up to set temp with a 5min soak
  {% else %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Displays info  
    NEOPIXEL_DISPLAY LED=hotkey_leds TYPE=bed_temp MODE=glow 
    _status_button_standby BUTTON=2   
    G1 X214.0 Y356.0 Z15 F9000                          # Goes to back of the bed
    M190 S{target_bed}                                  # Sets the target temp for the bed 
    #SET_DISPLAY_TEXT MSG="Soak for 2min"               # Displays info
    #G4 P120000                                         # Waits 2 min for the bedtemp to stabilize
  {% endif %}

  # Heating nozzle to 150 degrees. This helps with getting a correct Z-home
  SET_DISPLAY_TEXT MSG="Hotend: 150c"          # Displays info
  M109 S150                                    # Heats the nozzle to 150c

  ##  Quad gantry level
  SET_DISPLAY_TEXT MSG="Quad gantry leveling"      # Displays info
  status_led_calibrating
  STATUS_LEVELING                 # Sets SB-leds to leveling-mode
  quad_gantry_level               # Levels the buildplate via QGL
  G28 Z0                           # Homes Z again after QGL
  _status_button_standby BUTTON=6

  ##  Uncomment for bed mesh (2 of 2)
  SET_DISPLAY_TEXT MSG="Bed mesh"    # Displays info
  status_led_calibrating
  STATUS_MESHING                     # Sets SB-leds to bed mesh-mode
  bed_mesh_calibrate                 # Starts bed mesh

  # Heats up the nozzle up to target via data from slicer
  SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"             # Displays info
  STATUS_HEATING                                                # Sets SB-leds to heating-mode
  STATUS_LED_HEATING
  G1 X214.0 Y356.0 Z15 F9000                                    # Goes to center of the bed
  M107                                                          # Turns off partcooling fan
  M109 S{target_extruder}                                       # Heats the nozzle to printing temp
  SET_DISPLAY_TEXT MSG="Cleaning nozzle"                        # Displays info
  status_led_calibrating
  STATUS_CLEANING                                               # Sets SB-Leds to cleaning-mode
  CLEAN_NOZZLE                                                  # Cleans the nozzle

  # Gets ready to print by doing a purge line and updating the SB-leds
  SET_DISPLAY_TEXT MSG="Printing..."          # Displays info
  STATUS_PRINTING                                  # Sets SB-leds to printing-mode
  NEOPIXEL_DISPLAY LED=status_led TYPE=print_percent MODE=progress
  NEOPIXEL_DISPLAY LED=hotkey_leds TYPE=bed_temp MODE=glow
  _status_button_standby BUTTON=4       #4  Extrude 50mm button
  _status_button_standby BUTTON=8       #8  Resume button
  _status_button_ready BUTTON=9         #9  Pause button
  _status_button_standby BUTTON=10      #10 Service button
  _status_button_standby BUTTON=11      #11 Clean nozzle button
  _status_button_ready BUTTON=12        #12 Cancel print button
  #VORON_PURGE

#####################################################################
#   Print start macro Pfote
#####################################################################

[gcode_macro PRINT_START_PFOTE]
gcode:
  # This part fetches data from your slicer. Such as bed temp, extruder temp, chamber temp and size of your printer.
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  {% set target_chamber = params.CHAMBER|default("30")|int %}
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

  # Homes the printer, sets absolute positioning and updates the Stealthburner leds.
  SET_VELOCITY_LIMIT ACCEL=15000
  SET_VELOCITY_LIMIT ACCEL_TO_DECEL=7500
  STATUS_HOMING         # Sets SB-leds to homing-mode
  G28                   # Full home (XYZ)
  G90                   # Absolut position
  BED_MESH_PROFILE LOAD="pfote"        # Clears old saved bed mesh (if any)

  # Checks if the bed temp is higher than 90c - if so then trigger a heatsoak.
  {% if params.BED|int > 90 %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Displays info
    STATUS_HEATING                                      # Sets SB-leds to heating-mode
    STATUS_LED_HEATING
    M106 S255                                           # Turns on the PT-fan

    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Goes to center of the bed
    M190 S{target_bed}                                  # Sets the target temp for the bed
    #SET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"  # Displays info
    #TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}   # Waits for chamber to reach desired temp

  # If the bed temp is not over 90c, then it skips the heatsoak and just heats up to set temp with a 5min soak
  {% else %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Displays info                                    
    G1 X214.0 Y356.0 Z15 F9000                          # Goes to back of the bed
    M190 S{target_bed}                                  # Sets the target temp for the bed
    #SET_DISPLAY_TEXT MSG="Soak for 2min"               # Displays info
    #G4 P120000                                         # Waits 2 min for the bedtemp to stabilize
  {% endif %}

  # Heating nozzle to 150 degrees. This helps with getting a correct Z-home
  SET_DISPLAY_TEXT MSG="Hotend: 150c"          # Displays info
  M109 S150                                    # Heats the nozzle to 150c

  ##  Quad gantry level
  SET_DISPLAY_TEXT MSG="Quad gantry leveling"      # Displays info
  status_led_calibrating
  STATUS_LEVELING                 # Sets SB-leds to leveling-mode
  quad_gantry_level               # Levels the buildplate via QGL
  G28 Z0                          # Homes Z again after QGL

  # Heats up the nozzle up to target via data from slicer
  SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"             # Displays info
  STATUS_HEATING                                                # Sets SB-leds to heating-mode
  STATUS_LED_HEATING
  G1 X214.0 Y356.0 Z15 F9000                                    # Goes to center of the bed
  M107                                                          # Turns off partcooling fan
  M109 S{target_extruder}                                       # Heats the nozzle to printing temp
  SET_DISPLAY_TEXT MSG="Cleaning nozzle"                        # Displays info
  status_led_calibrating
  STATUS_CLEANING                                               # Sets SB-Leds to cleaning-mode
  CLEAN_NOZZLE                                                  # Cleans the nozzle

  # Gets ready to print by doing a purge line and updating the SB-leds
  SET_DISPLAY_TEXT MSG="Printing..."          # Displays info
  STATUS_PRINTING                                  # Sets SB-leds to printing-mode
  NEOPIXEL_DISPLAY LED=status_led TYPE=print_percent MODE=progress
  _status_button_standby BUTTON=4       #4  Extrude 50mm button
  _status_button_standby BUTTON=6       #6  Home all button   
  _status_button_standby BUTTON=8       #8  Resume button
  _status_button_ready BUTTON=9         #9  Pause button
  _status_button_standby BUTTON=10      #10 Service button
  _status_button_standby BUTTON=11      #11 Clean nozzle button
  _status_button_ready BUTTON=12        #12 Cancel print button
  #VORON_PURGE

#####################################################################
#   Print end macro
#####################################################################

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-5.0 F3600                 ; retract filament
    G91                            ; relative positioning
    G0 Z1.00 X20.0 Y20.0 F20000    ; move nozzle to remove stringing
    TURN_OFF_HEATERS
    M107                           ; turn off fan
    G1 Z5 F5000                    ; move nozzle up 5mm
    G90                            ; absolute positioning
    G0  X330 Y175 F10000           ; park middle left
    SET_VELOCITY_LIMIT ACCEL=15000
    SET_VELOCITY_LIMIT ACCEL_TO_DECEL=7500
    BED_MESH_CLEAR
    NEOPIXEL_DISPLAY LED=status_led TYPE=clear
    status_led_ready
    _status_button_busy BUTTON=2            #2  Preheat button
    _status_button_ready BUTTON=4           #4  Extrude 50mm button
    _status_button_ready BUTTON=6           #6  Home all button
    SET_LED_TEMPLATE LED=hotkey_leds TEMPLATE=""
    _status_button_ready BUTTON=7           #7  Led on/off button
    _status_button_standby BUTTON=8         #8  Resume button
    _status_button_standby BUTTON=9         #9  Pause button
    _status_button_ready BUTTON=10          #10 Service button
    _status_button_ready BUTTON=11          #11 Clean nozzle button
    _status_button_standby BUTTON=12        #12 Cancel print button
    SET_DISPLAY_TEXT MSG="Print completed"

[gcode_macro M109]
rename_existing: M99109
gcode:
    #Parameters
    {% set s = params.S|float %}
    
    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  ; Set hotend temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}   ; Wait for hotend temp (within 1 degree)
    {% endif %}

#####################################################################
#   Test speed macro
#####################################################################

# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

[gcode_macro TEST_SPEED]
gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

    {% for i in range(iterations) %}
        # Large pattern diagonals
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        
        # Large pattern box
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
    
        # Small pattern diagonals
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        
        # Small patternbox
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

    # Re-home and get position again for comparison:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 # This is a full G28 to fix an issue with CoreXZ - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/12
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED

[gcode_macro _POWER_OFF_PRINTER]
gcode:
  {action_call_remote_method("set_device_power",
                             device="Printer_24V",
                             state="off")}

#####################################################################
#   LED light on/off
#####################################################################

[gcode_macro led_off]
gcode:
    {% if printer.print_stats.state == "printing" %}
        SET_LOGO_LEDS_OFF
        SET_NOZZLE_LEDS_OFF
        SET_PIN PIN=daylight VALUE=0
        NEOPIXEL_DISPLAY LED=hotkey_leds TYPE=clear
        NEOPIXEL_DISPLAY LED=status_led TYPE=clear
        _status_button_standby BUTTON=7 #7  Led on/off button
        _status_button_ready BUTTON=1   #1  Daylight button
        SET_GCODE_VARIABLE MACRO=_BUTTON_B7 VARIABLE=toggle VALUE=1
    {% else %}
        TURN_OFF_HEATERS
        M84
        NEOPIXEL_DISPLAY LED=hotkey_leds TYPE=clear
        SET_LOGO_LEDS_OFF
        SET_NOZZLE_LEDS_OFF
        SET_PIN PIN=daylight VALUE=0
        STATUS_LED_OFF
        _status_button_standby BUTTON=7  #7  Led on/off button
        _status_button_ready BUTTON=1    #1  Daylight button
        SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=Raspberry_Pi_temp TARGET=60
        SET_GCODE_VARIABLE MACRO=_BUTTON_B7 VARIABLE=toggle VALUE=1
    {% endif %}

[gcode_macro led_on]
gcode:
    {% set BED_TEMP = printer.heater_bed.temperature %}
    {% if BED_TEMP|int > 90 %}
        _status_button_ready BUTTON=2
    {% else %}
        _status_button_standby BUTTON=2 
    {% endif %}
    
    {% if printer.print_stats.state == "printing" %}
        NEOPIXEL_DISPLAY LED=status_led TYPE=print_percent MODE=progress
        NEOPIXEL_DISPLAY LED=hotkey_leds TYPE=bed_temp MODE=glow
        STATUS_PRINTING
        _status_button_busy BUTTON=1        #1  Daylight button
        SET_PIN PIN=daylight VALUE=1
        _status_button_standby BUTTON=4     #4  Extrude 50mm button
        _status_button_standby BUTTON=5     #5  Set speed button
        _status_button_standby BUTTON=6     #6  Home all button
        _status_button_standby BUTTON=8     #8  Resume button
        _status_button_ready BUTTON=9       #9  Pause button
        _status_button_standby BUTTON=10    #10 Service button
        _status_button_standby BUTTON=11    #11 Clean nozzle button
        _status_button_ready BUTTON=12      #12 Cancel print button
    {% else %}
        status_led_ready
        STATUS_READY
        _status_button_busy BUTTON=1        #1  Daylight button
        SET_PIN PIN=daylight VALUE=1
        _status_button_busy BUTTON=2        #2  Set speed button
        _status_button_ready BUTTON=4       #4  Extrude 50mm button
        _status_button_standby BUTTON=5     #5  Set speed button
        _status_button_ready BUTTON=6       #6  Home all button
        _status_button_ready BUTTON=7       #7  Led on/off button
        _status_button_standby BUTTON=8     #8  Resume button
        _status_button_standby BUTTON=9     #9  Pause button
        _status_button_ready BUTTON=10      #10 Service button
        _status_button_ready BUTTON=11      #11 Clean nozzle button
        _status_button_standby BUTTON=12    #12 Cancel print button
        
    {% endif %}

#####################################################################
#   Hotend fan RPM check
#####################################################################

[delayed_gcode CHECK_ALL_FANS]
initial_duration: 1.5
gcode:
    HOTEND_FAN_CHECK
    UPDATE_DELAYED_GCODE ID=CHECK_ALL_FANS DURATION=3

# Change min_rpm and max_consecutive_stops to your desired values.
[gcode_macro HOTEND_FAN_CHECK]
variable_he_stop_count: 0
gcode:
    {% set min_rpm = 2000|float %}
    {% set max_consecutive_stops = 5 %}
    {% set rpm = printer['heater_fan hotend_fan'].rpm|float %}
    {% set he_target = printer[printer.toolhead.extruder].target|float %}
    {% set he_temp = printer[printer.toolhead.extruder].temperature|float %}
    {% set fan_on_temp = printer.configfile.settings['heater_fan hotend_fan'].heater_temp|float %}
    {% set he_stop_count = printer["gcode_macro HOTEND_FAN_CHECK"].he_stop_count|int %}

    {% if (he_target >= fan_on_temp) and (rpm < min_rpm) and (he_temp >= fan_on_temp) %}
        SET_GCODE_VARIABLE MACRO=HOTEND_FAN_CHECK VARIABLE=he_stop_count VALUE={he_stop_count + 1}
        M118 WARNING: Fan stoppage detected ({he_stop_count+1}/{max_consecutive_stops}).
        M400
        {% if printer["gcode_macro HOTEND_FAN_CHECK"].he_stop_count|int >= max_consecutive_stops-1 %}
            FAN_STOPPAGE_ROUTINE
        {% endif %}
    {% else %}
        SET_GCODE_VARIABLE MACRO=HOTEND_FAN_CHECK VARIABLE=he_stop_count VALUE=0
    {% endif %}

# Insert the gcode that you want to run when a fan stoppage is detected.
# This runs every ~3 seconds until the stop conditions are cleared.
[gcode_macro FAN_STOPPAGE_ROUTINE]
gcode:
    # If not already paused
    {% if printer['pause_resume'].is_paused|int == 0 %}
        M117 !!FAN STOPPAGE!!
        M118 FAN STOPPAGE DETECTED. PAUSING...
        PAUSE
        # Turn off the hotend. 
        # !! Don't forget to turn your hotend back on before resume. !!
        # -- If using this guide's pause/resume macros (in useful_macros.html), the hotend will automatically reheat on resume
        # -- (as long as the hotend is not turned off BEFORE pause is called)
        SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0
    {% endif %}

#####################################################################
#   Load filament
#####################################################################

[gcode_macro LOAD_FILAMENT]
gcode:
   M83                            ; set extruder to relative
   M106 S255                      ; Partcooling fan to max
   G1 E30 F300                    ; load
   G1 E25 F150                    ; prime nozzle with filament
   G4 P1000                       ; wait for 1 second
   G1 E30 F1800                   ; extrude for additional 30mm
   M106 S0                        ; Partcooling fan to off
   M82                            ; set extruder to absolute

#####################################################################
#   Unload filament
#####################################################################

[gcode_macro UNLOAD_FILAMENT]
gcode:
   M83                            ; set extruder to relative
   M106 S255                      ; Partcooling fan to max
   G1 E10 F300                    ; extrude a little to soften tip
   G1 E-40 F1800                  ; retract some, but not too much or it will jam
   G4 P1000                       ; wait for 1 second
   G1 E-44 F1800                  ; retract to additional 44mm
   M82                            ; set extruder to absolute
   M106 S0                        ; Partcooling fan to off